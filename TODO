==========================
==== Do these first! =====
==========================

* Debug Histo1DList 2D combined views!
  Is x-axis data always correct? Rounding?

* Histo1DWidget: zoom out after setHistogram()
  But not when the usage is the one in x- and y-projections where the histo is
  replaced with a similar one.

* Calibration:
  - On close ask if edits should be applied to the whole list.
  - Bugs when clearing/selecting inputs.

* Copy/Paste and Move Operators
  - Moving operators could violate the rule that inputs should come from the
    current user level or the ones below. For consistency keep that rule intact
    while moving.
  - Copy needs a clone() operation for analysis elements.
  - On copying an extractor the edit dialog should be opened.

* Open new histograms immediately. Do this when creating a sub-histogram.

* void AnalysisWidgetPrivate::actionOpen() and actionNew(): handle modified() state


* select input UI: disable other tree highlights while it's active.
* track down weird scrolling/selection bug when selcting inputs.
  What happens is that the treeview scrolls up and the wrong input is selected.
  This happens when clicking a node.

* Fix replay stats display and replay timer. It wasn't designed with pausing
  and stepping in mind.
* ZIP file support:
  Write listfile to zip. It still includes the VME config.
  On close:
  - write current analysis config to zip.
  - write program log file to zip (log from start of current run)
  - write some user description text file to the zip.

 - UserLevel hide/show GUI
 - Implement "Remove UserLevel" button
 - Calibration:
   * if only one event don't show the list of calibrations
   * when creating a new calib the global values are not applied to the
     individual ones, instead the default values from the table are used

 - react to event and module renames
 - "modified" concept for the analysis and it's elements
 - save/saveas/load error reporting
 - Make the AnalysisUI show consitency errors between vme and analysis configs.

* EventWidget and AnalysisWidget repopulate:
  - Restore open PipeDisplays:
    Store (ObjectId, OutputIndex) to get the output pipe and (pos, size) to restore the widget.
  - Restore splitter states when recreating event widgets.
  - Restore node expansion state
    Could store QUuids for expanded object nodes and after repop rebuild the
    VoidStar set of expanded nodes by getting the pointers via the ids.

==========================
==== Do these later! =====
==========================
* Calculated listfile size in stats display and size shown by windows explorer
  are not the same at all. Why?
* // FIXME: when using subranges the getBinUnchecked() calculation often yields negative bins. why?
  Verify this does in fact happen.
* DAQStats:
  - add pause/resume
  - figure out why buffers/s never has a fractional part
    -> part of the system. addBuffersRead() and addBytesRead() each call maybeUpdateIntervalCounters().
       If we're reading less than 1 buffer per second the resulting bytesPerSecond will be 0 for that interval.
    How to make this better?
- License info needs Apache License for PCG. Maybe others. Check what is needed here!
  Also use info from resources/README
- Refactor DAQConfig -> VMEConfig and DAQConfigTree to VMEConfigTree
- VMUSB: if there are connect/reconnect errors write them to the log view
  Do this when porting to libusb-1.0 as that should also provide better error messages.
- VMUSB: make the mutex non-recursive!
* Move from MDI to multiple top-level windows (allows making use of multiple monitors)

>>>>> Begin Analysis NG <<<<<
 - Add Operator::getDescription()
 - make sure the UI works with empty vme and event configs
 - display required memory in Histo2D dialog.
 - combine "single word" and "dual word" filters. the distinction is not needed
   anymore as both are MultiWordDataFilters now
 - Load default filters from templates
  
* Is MultiWordDataFilter::handleDataWord() behaviour "correct"/"good"?
  Should it break out of the loop once a filter matched?
  -> This would make it so that at least n words of data are needed
     for an n-word filter. Right now, given the right subfilters the
     filter can complete with a single word of data.
  Should it skip matched filters when the next data word comes in?
  -> Right now the already extracted value for the filter will be
     overwritten.
* Single word data filter matching and extraction must be very fast as they're
  used to handle most of the data and multi word filters are implemented in
  terms of single word filters.
<<<<< End AnalysisNG >>>>>

* Git version is not updated when rebuilding the project! FIX THIS!
  -> I failed at this. qmake is horrible.

* GUI
  * add versioning to the GUI state saved via QSettings. If the version changes
    use the default layout instead of restoring a possibly incompatible state.
  * add a "reset gui state" button somewhere

* add ability to add notes to VME/analysis config (maybe other objects too)
* VMEScript: add print command
* Limit the number of messages/s appended to the logview. With multithreading:
  do messages fill up one of the threads event queues? Can this be limited
  somehow? Better to directly limit the generation of these messages?
* Fix diagnostics window blocking when there are a lot of error messages being generated.

* workspace
    * copy templates from app dir to workspace (maybe?)
* Listfile format:
  Implement version 2 of the format as documented in the header file!

* Histos:
  * add histogram cuts
  * add histogram fitting

* VMUSB: support continuous mode and partial events!
* Mesytec Module Firmware Revision & Hardware ID
* prefix and (maybe) run number for listfiles

* Mesytec Werbung ^^ Hintergrundbilder, Wasserzeichen, etc. (CSS Theme?)
* Hist2d: look for standard color scales as used in publications, ROOT, etc.
  https://root.cern.ch/doc/master/TColor_8cxx_source.html#l02400
* How to handle filters without matching module? Right now they're not
  displayed until a module with the corresponding (eventIndex,moduleIndex) is
  created.
  Related: Remove Hist2d on filter removal?
  => would all be fixed when moving from (eventIndex, moduleIndex) to using object ids.

* threading and vme commands
  * run vme scripts in a separate thread when invoked from the gui

* ReadoutWorker split into generic and controller specific parts:
    Generic part is responsible for:
        - running vme init scripts
        - creating and opening the output listfile

    Controller specific parts:
        - init
        - readout
        - shutdown
        - pause
        - resume
  Do this when implementing support for another controller, not before.

* save and restore the position and size of windows
* save and restore the zoom and pan of histograms
* save and restore open histograms
* make use of the "enabled" flag for vme scripts, modules, events, etc

==========================
===== Maybe do these =====
==========================

======================================
==== Done, but kept for reference ====
======================================
>>>>> Begin Analysis NG <<<<<
* Filter on number of occurence: the filter is considered complete only if it
  matched N times.
  Needed for devices that can yield data for the same address in a single
  event. If the filter does not specify an occurence condition but matches
  multiple times only the first matched value will be kept.
  XXX: Impossible to simply accumulate all raw values for a channel into a Hist1D!
  -> Not an issue according to Robert as multi hits per channel need to be
     handled explicitly anyways.
===== Plan to handle array -> single value conversion =====
- Pipes are only used as output of Operators/Sources
- Pipes connect to Slots of Operators
- The slot specifies what kind of inputs it accepts: Array, Value, Both
- When an output pipe is connected to an input slot and the slot accepts Values
  the index into the input parameters must be supplied.
- Slots live in the receiving Operator. They now hold the source Pipe pointers
- The 'destination' member of Pipes now contains pointers to Slot instead of OperatorInterface
- Slots need to contain pointers to their owning Operator to be able to traverse the tree forward:
  sourceOp.outputPipe[i].destinations[j].destOp
=====
<<<<< End AnalysisNG >>>>>
