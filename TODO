==========================
==== Do these first! =====
==========================
>>>>> Begin Analysis NG <<<<<
 - !!! Make analysis use DAQConfig object ids instead of only going by eventIndex/moduleIndex !!!
   This way it would be possible to show that a certain Event/Module does not
   exist anymore in the DAQConfig.
   Otherwise the problem with analysis and daqconfig getting out of sync will
   keep coming and back and result in user confusion.
 - Gui to add new Hist1D
 - Hist2DSink
 - Gui to add new Hist2D
 - Add some way to distinguish between Operators for processing and the display tree.
   Right now it's like: if (!histo1DSink && !histo2DSink) { /* it's a processing operator */ }
   This does not scale.


- Split Registry into Source and Operator registries. Could be templated I think.
- More icons: icon for array of histos
- Histo1DListWidget needed!

<<<<< End AnalysisNG >>>>>


==========================
==== Do these later! =====
==========================
>>>>> Begin Analysis NG <<<<<
* Is MultiWordDataFilter::handleDataWord() behaviour "correct"/"good"?
  Should it break out of the loop once a filter matched?
  -> This would make it so that at least n words of data are needed
     for an n-word filter. Right now, given the right subfilters the
     filter can complete with a single word of data.
  Should it skip matched filters when the next data word comes in?
  -> Right now the already extracted value for the filter will be
     overwritten.
* Rename DataFilter to ParameterExtractor
* Single word data filter matching and extraction must be very fast as they're
  used to handle most of the data and multi word filters are implemented in
  terms of single word filters.
* Histo1D
  - Mouse cursor info area displays wrong bin number
<<<<< End AnalysisNG >>>>>

* Git version is not updated when rebuilding the project! FIX THIS!

* GUI
  * add versioning to the GUI state saved via QSettings. If the version changes
    use the default layout instead of restoring a possibly incompatible state.
  * add a "reset gui state" button somewhere

* add ability to add notes to VME/analysis config (maybe other objects too)
* VMEScript: add print command
* Limit the number of messages/s appended to the logview. With multithreading:
  do messages fill up one of the threads event queues? Can this be limited
  somehow? Better to directly limit the generation of these messages?
* Fix diagnostics window blocking when there are a lot of error messages being generated.

* workspace
    * copy templates from app dir to workspace (vielleicht?)
* Listfile format:
  Implement version 2 of the format as documented in the header file!

* Histos:
  * add histogram cuts
  * add histogram fitting

* VMUSB: support continuous mode and partial events!
* Mesytec Module Firmware Revision & Hardware ID
* prefix and (maybe) run number for listfiles

* Mesytec Werbung ^^ Hintergrundbilder, Wasserzeichen, etc. (CSS Theme?)
* Hist2d: look for standard color scales as used in publications, ROOT, etc.
  https://root.cern.ch/doc/master/TColor_8cxx_source.html#l02400
* Avoiding spinning in processEvents() while waiting for buffers. Instead use
  something like a semaphore and figure out how to still react to "stop"
  commands.
  Could signal the same semaphore when receiving commands and set some
  variables that are checked once the thread wakes up.
  (Maybe try WaitForMoreEvents as a quick fix)
* Hist2d Icon
* How to handle filters without matching module? Right now they're not
  displayed until a module with the corresponding (eventIndex,moduleIndex) is
  created.
  Related: Remove Hist2d on filter removal?

* add ability to create 2d histograms during DAQ/replay and fill them immediately

* threading and vme commands
  * run vme scripts in a separate thread when invoked from the gui
  * FIX the pause, run script, resume implementation. it's very hacky!
    - run script: Maybe implement a command queue in the context and return
                  QFuture<VMEResultList> objects to clients.
    - pause and resume: also return a QFuture or something to be able to wait for
                        the state change
    -> look at QFutureInterface

* ReadoutWorker split into generic and controller specific parts:
    Generic part is responsible for:
        - running vme init scripts
        - creating and opening the output listfile

    Controller specific parts:
        - init
        - readout
        - shutdown
        - pause
        - resume
  Do this when implementing support for another controller

* save and restore the position and size of windows
* save and restore the zoom and pan of histograms
* save and restore open histograms
* histograms: look at the storage type used. currently it's u32. should this be double?
* make use of the "enabled" flag for vme scripts, modules, events, etc

==========================
===== Maybe do these =====
==========================
* Move from MDI to multiple top-level windows (allows making use of multiple monitors)

======================================
==== Done, but kept for reference ====
======================================
>>>>> Begin Analysis NG <<<<<
* Filter on number of occurence: the filter is considered complete only if it
  matched N times.
  Needed for devices that can yield data for the same address in a single
  event. If the filter does not specify an occurence condition but matches
  multiple times only the first matched value will be kept.
  XXX: Impossible to simply accumulate all raw values for a channel into a Hist1D!
  -> Not an issue according to Robert as multi hits per channel need to be
     handled explicitly anyways.
===== Plan to handle array -> single value conversion =====
- Pipes are only used as output of Operators/Sources
- Pipes connect to Slots of Operators
- The slot specifies what kind of inputs it accepts: Array, Value, Both
- When an output pipe is connected to an input slot and the slot accepts Values
  the index into the input parameters must be supplied.
- Slots live in the receiving Operator. They now hold the source Pipe pointers
- The 'destination' member of Pipes now contains pointers to Slot instead of OperatorInterface
- Slots need to contain pointers to their owning Operator to be able to traverse the tree forward:
  sourceOp.outputPipe[i].destinations[j].destOp
- Fix operators to use Slot::acceptedInputTypes!
=====
<<<<< End AnalysisNG >>>>>
