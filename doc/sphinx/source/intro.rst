##################################################
Introduction
##################################################
**mvme** is a VME Data Acquisition solution by **mesytec** aimed at small scale nuclear physics
experiments involving a single VME controller. The goal of this project is to provide an easy to
setup, easy to use, cross-platform data acquisition system with basic data visualization and
analysis capabilities.

===================
Features
===================

* High-rate, low-latency VME module readout
* Readout rates of up to 15 MB/s
* Easy creation and configuration of the VME setup

  * Multiple event triggers are possible (NIM, IRQ, periodic readout)
  * Multiple modules can be read out per trigger
  * Flexible VME module setup using configuration scripts

* Live histogramming of readout data (1D and 2D)
* Flexible VME module data extraction
* Graphical analysis UI
* Optional compression of output listfiles
* Replays of recorded listfile data

========
Overview
========

.. figure:: images/mvme_architecure.png
   :width: 100%

   mvme overview

.. warning:: TODO
   Describe what mvme is about in broad terms.
   The detailed stuff goes into the architecture section below.

**mvme** achieves high-rate, low-latency VME readout by using VM-USBs
autonomous DAQ mode. In this mode the controller executes lists of commands
(*trigger stacks*) upon activation of a specific trigger condition. Data
generated by the execution of trigger stacks is buffered and then sent over USB
to the controlling computer.

In mvme the physical VME setup is described as a tree of objects with *Events*
as top-level nodes. Each *Event* has a trigger condition (e.g. *IRQ=1, IRQ
Level=0*) and contains the *Modules* to be read out on every activation of the
trigger.

A *Module* in mvme has a VME base address (the high 16 bits of the full 32-bit
VME bus address) and a collection of :ref:`VME Scripts <vme-script-reference>`.
The VME Scripts contain commands to configure the module prior to starting data
acquisition. Additionally for each module there is a script containing the
commands necessary to correctly readout the modules data in DAQ mode.

The complete VME setups allows mvme to build trigger stacks containing module
readout commands, upload them to the controller and perform the controller
configuration. The VME setup also describes the format of the data will be read
out and thus allows validation of the data stream received via USB.

.. warning:: XXX: leftoff


User supplied vme setup.
Modules grouped by trigger
Config files with templates for VME modules
Trigger parameters

====> mvme builds readout stacks, uploads them to the controller.
      Performs controller trigger setup.
      Initializes modules (data comes from user supplied modules).
      Runs user scripts
      Puts the controller into DAQ mode

      Reads incoming data from USB.

      Verify data is well formed and matches the configuration.
      Transform data into internal format. Split at module boundaries in case
      of multi-module trigger.

      Optionally compresses the data and writes it to disk.

      This ends the VME side of things.

      Data is passed on to the analysis.
      No data is dropped from the listfile but during DAQ it can be dropped
      from the analysis if the analysis can not keep up.







**mvme** builds trigger stacks containing module readout commands from a set of
user supplied VME configuration files.

==================================================
System Requirements
==================================================

* Any recent 64-bit Linux distribution or a 64-bit version of Windows XP or later.

  32-bit builds are possible but not recommended as the limited address space can be quickly used up
  when creating multiple histograms.
* **WIENER VM-USB** VME Controller
* libusb-0.1 (Linux) / libusb-win32 (Windows)

  The windows installer can optionally run a program to handle the driver installation (Zadig).

.. note::
  It is also possible to compile builds using libusb-1.0 instead of the old libusb-0.1 API.

.. TODO Refer to the build instructions for 32-bit builds here once those build instructions are written.

* At least 4 GB RAM is recommended.
* Two or more processor cores are recommended as **mvme** makes use of 3
  logical cores (readout, analysis and GUI).



.. include:: installation.rstinc
.. include:: quickstart.rstinc
