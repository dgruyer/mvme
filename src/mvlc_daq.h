#ifndef __MVME_MVLC_DAQ_H__
#define __MVME_MVLC_DAQ_H__

#include "libmvme_export.h"
#include "mvlc/mvlc_qt_object.h"
#include "vme_config.h"

namespace mesytec
{
namespace mvlc
{

using Logger = std::function<void (const QString &)>;

// The following steps are executed:
// - disable_all_triggers
// - reset_stack_offsets
// - setup_readout_stacks
// - enable_triggers
//
// Returns std::error_codes generated by the MVLC code in case of errors.
// Exceptions thrown by internal function calls are not caught but passed on to
// the caller (e.g. vme_script::ParseError).

// Stage 1 setup reads and prints the hardwareId and firmwareRevision and sets
// up the MCST address.
std::error_code LIBMVME_EXPORT
    setup_mvlc_stage1(MVLCObject &mvlc, VMEConfig &vmeConfig, Logger logger);

// Stage 2 setup builds and uploads the readout stacks and performs the trigger I/O setup.
// Finally the triggers are enabled.
std::error_code LIBMVME_EXPORT
    setup_mvlc_stage2(MVLCObject &mvlc, VMEConfig &vmeConfig, Logger logger);

std::error_code LIBMVME_EXPORT
    enable_triggers(MVLCObject &mvlc, const VMEConfig &vmeConfig, Logger logger);

std::error_code LIBMVME_EXPORT
    disable_all_triggers(MVLCObject &mvlc);

std::error_code LIBMVME_EXPORT
    reset_stack_offsets(MVLCObject &mvlc);

std::error_code LIBMVME_EXPORT
    setup_readout_stacks(MVLCObject &mvlc, const VMEConfig &vmeConfig,
                         Logger logger);

std::error_code LIBMVME_EXPORT
    setup_trigger_io(MVLCObject &mvlc, VMEConfig &vmeConfig,
                     Logger logger);

} // end namespace mvlc
} // end namespace mesytec

#endif /* __MVME_MVLC_DAQ_H__ */
