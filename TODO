==================================================
TODO list somewhat sorted by priority
==================================================

Crash related to ANALYSIS_USE_SHARED_HISTO1D_MEM on adding a new H1D.

Thread 1 "mvme" received signal SIGSEGV, Segmentation fault.
0x00007ffff79c4902 in QVector<std::shared_ptr<Histo1D> >::detach() () from libmvme.so
(gdb) bt
#0  0x00007ffff79c4902 in QVector<std::shared_ptr<Histo1D> >::detach() () from libmvme.so
#1  0x00007ffff79ba4ac in analysis::Histo1DSink::beginRun(RunInfo const&) () from libmvme.so
#2  0x00007ffff79bd174 in analysis::Analysis::beginRun_internal_only(RunInfo const&) () from libmvme.so
#3  0x00007ffff79bd2ee in analysis::Analysis::beginRun(RunInfo const&, QHash<QUuid, vme_analysis_common::VMEConfigIndex> const&) () from libmvme.so
#4  0x00007ffff79bdc44 in analysis::Analysis::addOperator(QUuid const&, std::shared_ptr<analysis::OperatorInterface> const&, int) () from libmvme.so
#5  0x00007ffff79d7af6 in analysis::EventWidget::addOperator(std::shared_ptr<analysis::OperatorInterface>, int) () from libmvme.so
#6  0x00007ffff79ee692 in analysis::AddEditOperatorWidget::accept() () from libmvme.so
#7  0x00007ffff5f0f77d in QMetaObject::activate(QObject*, int, int, void**) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5











* Disallow opening listfiles via the listfile browser while DAQ readout is running

* Fix sis lost packet count. On robert's windows machine it's still bugged and
  jumps to 1.6e7 or so instantly!

* Display actual size of the listfile on the disk. Avoids having to pull
  information from the quazip/zlib libs. Display the size after the listfile
  has been loaded, not after the replay has started

* Think about the sis3153 counted block read commands. Maybe add a "dialect" to
  vmescript so that the fact that sis3153 does not have a mask operation is
  clear.

* Fix readout workers eating 100% cpu in paused state. I don't know why
  processEvents() returns immediately for both readout workers.  This only
  happens if the maxtime arg is used. I probably misunderstood the
  documentation.
  Fix? local event loop with a 1s timer which makes it quit?
  That fix would work if the timetick handling code would be smarter. As it is
  done right now the code does not store the remaining fractions of a second
  after a timetick has been sent to the analysis. This means after a while a
  full second will be lost, then another and so on.
  => Remember the fractional part of the elapsed time and add it to the elapsed
  time of the next iteration until a full second is accumulated.

* sis3153 implementation
  * Running "Init Module" when disconnected blocks the UI
  * Extract and make use of the counter in beginHeaders (0xbb...)
    Count the number of lost packets.
  * Make the mblt count read commands work with the default data_len_format
    setting. Use the leftshift value of the sis register for this.
    Document the behaviour, maybe change the command to not include the mask
    anymore, etc...

* vme: allow disabling of events and modules.
  This is very useful for testing. Without disabling modules multi-event
  processing will report errors and if the module is not even present in the
  vme crate the readout will slow down due to timeouts on the VME bus.

* check the case where listfile creation throws an exception. right now this
  results in a communication error with the sis controller when trying to start
  another run after a failed one.

* Fix crash in analysis ui when moving an operator. Happens with the PMT test
  setup when moving one of the rightmost 2d histos.
  -> Cannot reproduce anymore...

* Checks what's up with the size limit of the log view. It never seems to stop
  growing and that's part of why there's such a major slowdown when being
  spammed by controller errors.
  The goal is to only keep a certain number of messages around and never grow
  above a certain amount of memory. A circular buffer might be good...

* Fix anaylsis object selection color under win7. It's horrible and the text is
  not readable anymore.

* Improve VMEScriptEditor search:
  Make it get focus under windows and unity
  Make it get focus when hitting ctrl+f again
  Bind "find next" to F3.
  Maybe add "highlight" all.

* Analysis: fix names generated by "generate default filters"


* Analysis: getDisplayName() and getShortName() are not that great. For the
  AggregateOps operator I'd like to display "Aggregate Operations" in the "add
  operator" context menu instead of "sum". Where else is getDisplayName() used?
  -> The above works. What I need now is to change the suggested operator name
  of selecting a different aggregate op. Right now it always appends ".sum".

* Add a scaler display somewhere. What does this show? Hz?

* Do not use signals/slots for the pause/resume/stop implementation in
  VMEReadoutWorkers. Instead just set the desired state directly (maybe
  securing the access with QAtomicInt in a tight loop). This would allow not
  having to call processEvents() in the readoutLoop anymore.

* Include  git branch name in binary
* Maybe take a look at stopping the analysis mid-buffer on user request. This
  would allow to use larger buffer sizes without increasing the time-to-stop.
  XXX: I do not even know why it takes time to stop. Does StopImmediately not
  work?
  -> Make MVMEEventProcessor support pause/resume directly.

* Resolution change for 2D combined histograms?
  -> Would have to implement this in a different way: Instead of just looking
  up the data in the corresponding H1D instances I'd have to create a new H2D
  with the desired resolution and insert the source values into that histogram.

* Make a RCbus example including a delay between switchting NIM to cbus mode!

* Implement adding of module specific vme init scripts via the GUI.
  The user should be able to modify the order of init scripts by
  dragging/dropping, remove existing scripts and add new ones.
  Optionally copying of an init script to the same or a different module could
  be implemented.

* Maybe reload the analysis on opening a listfile.
  Without the reload the analysis window can become empty if the listfile
  contains different module uuids than the ones in the analysis. A reload could
  trigger a simple 1->1 import of the module and all would be good again.
  The reload could als trigger opening the import dialog if it requires user
  intervention.

* Logspam still makes the app hang! Fix this!!!

* Histo1D and Histo1DWidget
    * Bug: H1D does not work when unitMin > unitMax
    * Histo1DWidget: zoom out after setHistogram()
      But not when the usage is the one in x- and y-projections where the histo is
      replaced with a similar one.
    * Histo1DWidget: The curve for the last bin is not drawn. Try to finally find a fix for this.
    * Read up on binning error calculations. See how ROOT does it.
    * show fwhm only when gauss display is active

* Analysis and AnalysisUI
    * Open new histograms immediately. Do this when creating a sub-histogram.
      Maybe only if DAQ/Replay is running?
    * Copy/Paste
      - Copy needs a clone() operation for analysis elements.
      - On copying an extractor the edit dialog should be opened.
      - Having the ability to clone operators would allow making editing of
        operators much safer.
        Right now if the user picks another input or clears any input slots the
        analysis has to be paused and restarted and dependent operators
        immediately notice the change. This means even if the user cancels the
        dialog the analysis can have unexpected modifications.
        With cloning a copy of the operator would be created. Selecting and
        clearing inputs would only affect the cloned version of the operator
        (input pipes would not need to be fully connected so the input sources
        do not need to change at all during editing -> half connected state!)

- Add error reporting to VMEConfig and Analysis version conversion and read routines

- Refactor gui_write_json_file() to write_json_file() and use exceptions to report errors.
  Meaning: implement functionality using exceptions and not caring about if
  it's used from the gui or not. Then build and use gui wrappers which show
  messageboxes where needed.

- Add warnings to template loading if there are duplicate module types
- Fix diagnosis window hanging and eating system memory when EOE check is
  active and a lot of errors are occuring

* Log throttling!!!!

* Check for off-by-one errors in the 2D projection code

* lastlog.log:
  Write every logged message to lastlog.log. Do this in the main thread. Flush
  to disk frequently.
  At startup move lastlog.log to lastlog.1.log.
  Keep 5 logfiles around. 4 -> 5, 3 -> 4, 2 -> 3, 1 -> 2, 0 -> 1



* select input UI: disable other tree highlights while it's active.
* ZIP file support:
  On close:
  - write some user description text file to the zip. "Run description", "Run notes", "DAQ notes"
 - save/saveas/load error reporting

* VMEConfig
    * Allow Adding of VME-Init scripts to modules via the gui!

* EventWidget and AnalysisWidget repopulate:
  - Restore open PipeDisplays:
    Store (ObjectId, OutputIndex) to get the output pipe and (pos, size) to restore the widget.
  - Restore splitter states when recreating event widgets.
  - Restore node expansion state
    Could store QUuids for expanded object nodes and after repop rebuild the
    VoidStar set of expanded nodes by getting the pointers via the ids.
* Analysis structure:
  SourceEntry does not really need the eventId as the moduleId implicitly
  specifies the eventId.
* H1D: Take the median of the visible left and right edges. Subtract that value
  from the calculated statistics values. This is supposed to remove the noise
  to the left and right of a peak.
* HistoViewer: Ability to save filled Histograms to disk and reload them later.
  This will allow using histogram tools (fits, etc.) on loaded histos. It also
  allows comparing histos from different runs etc.
* Calculated listfile size in stats display and size shown by windows explorer
  are not the same at all. Why?
* // FIXME: when using subranges the getBinUnchecked() calculation often yields negative bins. why?
  Verify this does in fact happen.
* DAQStats:
  - add pause/resume
  - figure out why buffers/s never has a fractional part
    -> part of the system. addBuffersRead() and addBytesRead() each call maybeUpdateIntervalCounters().
       If we're reading less than 1 buffer per second the resulting bytesPerSecond will be 0 for that interval.
    How to make this better?
- License info needs Apache License for PCG. Maybe others. Check what is needed here!
  Also use info from resources/README
- VMUSB: if there are connect/reconnect errors write them to the log view
  Do this when porting to libusb-1.0 as that should also provide better error messages.
- VMUSB: make the mutex non-recursive!

* GUI
  * add versioning to the GUI state saved via QSettings. If the version changes
    use the default layout instead of restoring a possibly incompatible state.
  * add a "reset gui state" button somewhere

* add ability to add notes to VME/analysis config (maybe other objects too)
* VMEScript: add print command
* Limit the number of messages/s appended to the logview. With multithreading:
  do messages fill up one of the threads event queues? Can this be limited
  somehow? Better to directly limit the generation of these messages?

* Histos:
  * add histogram cuts
  * add histogram fitting

* Mesytec Werbung ^^ Hintergrundbilder, Wasserzeichen, etc. (CSS Theme?)
* Hist2d: look for standard color scales as used in publications, ROOT, etc.
  https://root.cern.ch/doc/master/TColor_8cxx_source.html#l02400
* How to handle filters without matching module? Right now they're not
  displayed until a module with the corresponding (eventIndex,moduleIndex) is
  created.
  Related: Remove Hist2d on filter removal?
  => would all be fixed when moving from (eventIndex, moduleIndex) to using object ids.

* threading and vme commands
  * run vme scripts in a separate thread when invoked from the gui

* save and restore the zoom and pan of histograms
* save and restore open histograms
* Fix diagnostics window blocking when there are a lot of error messages being generated.
