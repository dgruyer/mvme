==========================
==== Do these first! =====
==========================

- Histo1D Calibration UI: Wrong Vis. Max Value for empty histograms
- Histo1D Calibration UI: "Restore" uses unexpected values. Also there's no way to undo the restore operation. (calibResetToFilter)
- Fix MVMEAnalysisVersion handling. Converting from versions < 2 needs access to the VME config...
- Set analysis modified and/or set an empty filename if vme assignment has changed the analysis.

- Refactor gui_write_json_file() to write_json_file() and use exceptions to report errors.
  Meaning: implement functionality using exceptions and not caring about if
  it's used from the gui or not. Then build and use gui wrappers which show
  messageboxes where needed.

- VMEConfig read error handling.
  * Error if CurrentDAQConfigVersion < get_vmeconfig_version()
    -> The file was created by a newer version of MVME and might not load correctly.
- Add warnings to template loading if there are duplicate module types
- VMEScript: change parsing of the short form to first check if it is a command
  and only try to parse the short form if it isn't. See the comment in
  parse_line().
- Fix diagnosis window hanging and eating system memory when EOE check is
  active and a lot of errors are occuring

New VME/Analysis Template System (VATS)
---------------------------------------
* When quitting: if vme script editor asks for confirmation and the user
  presses cancel the mainwindow will still close

* AddEditOperatorWidget: highlight selected input on button hover
* VMUSBReadoutWorker: Add daqconfig consistency checks. Abort if the checks fail.

* Clearly document Extractor behaviour:
  - How does it use the individual filters?
  - How are data and address values formed?
  - How does WordIndex behave?
  - What does RequiredCompletionCount do?
* Close histograms on opening a new analysis config.
* Bug: H1D does not work when unitMin > unitMax
* Bug: H1D Print to File is broken. Also check save to file.
* Histograms:
  - Read up on binning error calculations. See how ROOT does it.

* DAQ Config gui: restore minimized vme script editors on script (double?) click
* DAQConfig: Add a "disabled" condition to events to allow temporarily disabling them.
* DAQConfig enh: Global Scripts DAQ Start, DAQ Stop and Manual should have a folder-like icon.
* DAQConfig: most templates are important as without them the readout does not
  work at all (mcast, start, stop, reset). Display a clear message if any of
  the required templates is missing.

* Log throttling!!!!

* When closing the main window via the window manager do quit the application.
* Check for off-by-one errors in the 2D projection code
* Make listfile-dumper handle the v1 format.

* lastlog.log:
  Write every logged message to lastlog.log. Do this in the main thread. Flush
  to disk frequently.
  At startup move lastlog.log to lastlog.1.log.
  Keep 5 logfiles around. 4 -> 5, 3 -> 4, 2 -> 3, 1 -> 2, 0 -> 1

* Histo1DWidget: zoom out after setHistogram()
  But not when the usage is the one in x- and y-projections where the histo is
  replaced with a similar one.
* Histo1DWidget: The curve for the last bin is not drawn. Try to finally find a fix for this.

* Copy/Paste and Move Operators
  - Moving operators could violate the rule that inputs should come from the
    current user level or the ones below. For consistency keep that rule intact
    while moving.
  - Copy needs a clone() operation for analysis elements.
  - On copying an extractor the edit dialog should be opened.

* Open new histograms immediately. Do this when creating a sub-histogram.


* select input UI: disable other tree highlights while it's active.
* Fix replay stats display and replay timer. It wasn't designed with pausing
  and stepping in mind.
* ZIP file support:
  On close:
  - write some user description text file to the zip. "Run description", "Run notes", "DAQ notes"

 - UserLevel hide/show GUI

 - "modified" concept for the analysis and it's elements
 - save/saveas/load error reporting
 - Make the AnalysisUI show consistency errors between vme and analysis configs.

* EventWidget and AnalysisWidget repopulate:
  - Restore open PipeDisplays:
    Store (ObjectId, OutputIndex) to get the output pipe and (pos, size) to restore the widget.
  - Restore splitter states when recreating event widgets.
  - Restore node expansion state
    Could store QUuids for expanded object nodes and after repop rebuild the
    VoidStar set of expanded nodes by getting the pointers via the ids.

==========================
==== Do these later! =====
==========================
* Analysis structure:
  SourceEntry does not really need the eventId as the moduleId implicitly
  specifies the eventId.
* H1D: Take the median of the visible left and right edges. Subtract that value
  from the calculated statistics values. This is supposed to remove the noise
  to the left and right of a peak.
* HistoViewer: Ability to save filled Histograms to disk and reload them later.
  This will allow using histogram tools (fits, etc.) on loaded histos. It also
  allows comparing histos from different runs etc.
* Calculated listfile size in stats display and size shown by windows explorer
  are not the same at all. Why?
* // FIXME: when using subranges the getBinUnchecked() calculation often yields negative bins. why?
  Verify this does in fact happen.
* DAQStats:
  - add pause/resume
  - figure out why buffers/s never has a fractional part
    -> part of the system. addBuffersRead() and addBytesRead() each call maybeUpdateIntervalCounters().
       If we're reading less than 1 buffer per second the resulting bytesPerSecond will be 0 for that interval.
    How to make this better?
- License info needs Apache License for PCG. Maybe others. Check what is needed here!
  Also use info from resources/README
- Refactor DAQConfig -> VMEConfig and DAQConfigTree to VMEConfigTree
- VMUSB: if there are connect/reconnect errors write them to the log view
  Do this when porting to libusb-1.0 as that should also provide better error messages.
- VMUSB: make the mutex non-recursive!

>>>>> Begin Analysis NG <<<<<
 - Add Operator::getDescription()
 - make sure the UI works with empty vme and event configs
 - display required memory in Histo2D dialog.
 - combine "single word" and "dual word" filters. the distinction is not needed
   anymore as both are MultiWordDataFilters now
 - Load default filters from templates
<<<<< End AnalysisNG >>>>>

* Git version is not updated when rebuilding the project! FIX THIS!
  -> I failed at this. qmake is horrible.

* GUI
  * add versioning to the GUI state saved via QSettings. If the version changes
    use the default layout instead of restoring a possibly incompatible state.
  * add a "reset gui state" button somewhere

* add ability to add notes to VME/analysis config (maybe other objects too)
* VMEScript: add print command
* Limit the number of messages/s appended to the logview. With multithreading:
  do messages fill up one of the threads event queues? Can this be limited
  somehow? Better to directly limit the generation of these messages?
* Fix diagnostics window blocking when there are a lot of error messages being generated.

* Histos:
  * add histogram cuts
  * add histogram fitting

* Mesytec Module Firmware Revision & Hardware ID
* prefix and (maybe) run number for listfiles

* Mesytec Werbung ^^ Hintergrundbilder, Wasserzeichen, etc. (CSS Theme?)
* Hist2d: look for standard color scales as used in publications, ROOT, etc.
  https://root.cern.ch/doc/master/TColor_8cxx_source.html#l02400
* How to handle filters without matching module? Right now they're not
  displayed until a module with the corresponding (eventIndex,moduleIndex) is
  created.
  Related: Remove Hist2d on filter removal?
  => would all be fixed when moving from (eventIndex, moduleIndex) to using object ids.

* threading and vme commands
  * run vme scripts in a separate thread when invoked from the gui

* ReadoutWorker split into generic and controller specific parts:
    Generic part is responsible for:
        - running vme init scripts
        - creating and opening the output listfile

    Controller specific parts:
        - init
        - readout
        - shutdown
        - pause
        - resume
  Do this when implementing support for another controller, not before.

* save and restore the zoom and pan of histograms
* save and restore open histograms

==========================
===== Maybe do these =====
==========================

======================================
==== Done, but kept for reference ====
======================================
>>>>> Begin Analysis NG <<<<<
* Filter on number of occurence: the filter is considered complete only if it
  matched N times.
  Needed for devices that can yield data for the same address in a single
  event. If the filter does not specify an occurence condition but matches
  multiple times only the first matched value will be kept.
  XXX: Impossible to simply accumulate all raw values for a channel into a Hist1D!
  -> Not an issue according to Robert as multi hits per channel need to be
     handled explicitly anyways.
===== Plan to handle array -> single value conversion =====
- Pipes are only used as output of Operators/Sources
- Pipes connect to Slots of Operators
- The slot specifies what kind of inputs it accepts: Array, Value, Both
- When an output pipe is connected to an input slot and the slot accepts Values
  the index into the input parameters must be supplied.
- Slots live in the receiving Operator. They now hold the source Pipe pointers
- The 'destination' member of Pipes now contains pointers to Slot instead of OperatorInterface
- Slots need to contain pointers to their owning Operator to be able to traverse the tree forward:
  sourceOp.outputPipe[i].destinations[j].destOp
=====
<<<<< End AnalysisNG >>>>>
