##################################################
Introduction
##################################################
**mvme** is a VME data acquisition solution by `mesytec`_ aimed at small scale nuclear physics
experiments involving a single VME controller. The goal of this project is to provide an easy to
setup, easy to use, cross-platform data acquisition system with basic data visualization and
analysis capabilities.

.. _mesytec: http://mesytec.com/

.. figure:: images/mvme_architecure.png

   mvme overview

==================================================
Features
==================================================

* High-rate, low-latency VME module readout
* Readout rates of up to 15 MB/s
* Easy creation and configuration of the VME setup

  * Multiple event triggers are possible (NIM, IRQ, periodic readout)
  * Multiple modules can be read out per trigger
  * Flexible VME module setup using configuration scripts

* Live histogramming of readout data (1D and 2D)
* Flexible VME module data extraction
* Graphical analysis UI
* Optional compression of output listfiles
* Replays of recorded listfile data

==================================================
High-level overview
==================================================

The VME side
--------------------------------------------------
mvme achieves high data rate, low-latency VME readout by using VM-USBs
**autonomous DAQ mode**. In this mode the VME controller executes lists of
commands (**trigger stacks**) upon activation of a specific trigger condition.
Data generated by the execution of trigger stacks is buffered and then sent
over USB to the controlling computer.

In mvme the physical VME setup is described as a tree of objects with **events**
as top-level nodes. Each event has a trigger condition (e.g. *Interrupt* or
*NIM*) and contains the **modules** to be read out on every activation of the
trigger.

A **module** in mvme has a collection of :ref:`VME Scripts
<vme-script-reference>`. These scripts contain the module configuration (module
specific parameters, multicast setup, etc.) and the commands required to
perform the readout. The readout commands of all modules belonging to the same
event are combined to form the trigger stacks uploaded to the VME controller.

.. autofigure:: images/vme_two_modules_expanded.png
   :scale-latex: 60%

   VME setup with one event containing two modules

The VME setup also describes the structure of the data that is expected to be
read out and thus allows the software to validate the received data stream.

The DAQ process
--------------------------------------------------
When requested to start a data acquisition run mvme performs the following
steps:

* Setup modules using the module VME scripts
* Initialize the VME controller using information from the VME configuration
* Switch the controller into DAQ mode
* Repeat until DAQ is stopped:

  * Read a data buffer from the VME controller
  * Validate the structure of the received data
  * Augment the data with mvme specific meta data
  * Write data to the listfile (optionally using compression)
  * Pass data to the :ref:`intro-analysis`

* Tell the controller to leave DAQ mode
* Close the listfile

.. _intro-analysis:

Analysis
--------------------------------------------------
mvme contains an analysis system that allows parameter extraction (e.g. ADC
values per channel), calibration, accumulation and visualization of data both
during a DAQ run and while replaying from file. Additionally a set of built-in
operators can be used to perform calculations and transformations on the data
as it flows through the system.

.. autofigure:: images/intro_analysis_default_filters_highlights.png
   :scale-latex: 60%

   Analysis UI with MDPP-16 default objects

The structure defined by the VME configuration is also present in the analysis:
modules which are read out as a result of the same trigger condition are
grouped together.

The system itself models dataflow from **sources**, through **operators**, into
**sinks**. Data is transported in the form of **parameter arrays** with each
element carrying the parameters numeric value and additional meta information.

.. figure:: images/analysis_flowchart.png

   Example analysis dataflow

**Sources** are data extractors that are directly attached to a VME module. A
source receives each data word that was read out from the module in response to
a trigger condition. Sources are used to split the data into logical parts, e.g
*Amplitude* and *Time* data and to extract the corresponding raw values.

**Operators** are logic pieces used to perform calculations on the data (e.g.
calibrate raw ADC values to voltage). Operators can have multiple inputs and
produce a single output array.

**Sinks** are data accumulators that do not produce any output parameters.
Currently 1D and 2D histogram sinks are implemented.

Output parameters of sources and operators can be inspected at runtime.
Objects can be added, removed and modified even while the DAQ or a replay is
running. Changes are effective immediately.

.. note::
  Data acquisition and writing the data to file have the highest priority in
  mvme. If during a DAQ run the analysis system cannot keep up with the
  incoming data rate some buffers will not be passed on to the analysis.

  The number of buffers not passed on is shown as *Buffers dropped* in the
  statistics area at the bottom of the main window.

  When replaying from file *all* buffers are passed to the analysis.
