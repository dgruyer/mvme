/* This file was auto generated by mvme-{{mvme_version}} on {{export_date}},
 * with data from run {{run_identifier}}.
 *
 * DO NOT MODFIY as this file will be overwritten when the export is run again!
 */

#ifndef __MVME_EXPORT_GUARD_{{header_guard}}__
#define __MVME_EXPORT_GUARD_{{header_guard}}__

#include <cstddef>
#include <string>
#include <utility>

struct {{struct_name}}
{
    /* Exported data arrays. */
{{#array_members}}
    double {{array_name}}[{{array_size}}];
{{/array_members}}

    /* Lower and upper limits for each parameter of each array. */
    struct Limits
    {
{{#array_limits}}
        static const double {{array_name}}[{{array_size}}][2];
{{/array_limits}}
    };

    /* The number of data arrays. */
    static const size_t ArrayCount = {{array_count}};

    /* The name of each exported array. */
    static const std::string ArrayNames[ArrayCount];

    /* The unit label for each array. */
    static const std::string UnitLabels[ArrayCount];

    /* Accessors using array and param indices. These allow non-static access
       to static data. */

    /* Same as the static ArrayCount member. */
    size_t getArrayCount() const;

    /* Returns a pointer to the exported array with the given index.
       Returns nullptr if the index is out of range. */
    const double *getArray(size_t index) const;

    /* Returns the size of the exported array with the given index.
       Returns 0 if the index is out of range. */
    size_t getArraySize(size_t index) const;

    /* Returns the name of the input array as defined in the analysis. */
    std::string getArrayName(size_t index) const;

    /* Returns the unit label of the array with the given index.
       Returns an empty string if the index is out of range. */
    std::string getUnitLabel(size_t index) const;

    /* Returns the limits for the given array and parameter indices.
       A std::pair of NaN values is returned if either the array index or the
       parameter index are out of range. */
    std::pair<double, double> getLimits(size_t arrayIndex, size_t paramIndex) const;

} __attribute__((packed)); /* No padding wanted. */

#endif /* __MVME_EXPORT_GUARD_{{header_guard}}__ */
