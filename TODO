==================================================
Do these first!
==================================================

* Checks what's up with the size limit of the log view. It never seems to stop
  growing and that's part of why there's such a major slowdown when being
  spammed by controller errors.
  The goal is to only keep a certain number of messages around and never grow
  above a certain amount of memory. A circular buffer might be good...

* vme templates:
  - add a new filter for extended timestamps
  - complete VMMR: extraction filters and bus/channel settings.

* analysis: optionally display rates instead of hitcounts for extractors and
  histos.

* analysis: during a replay also display rates based on the original timeticks
  used during recording. This should average out to be the same rate that was
  observed during recording.

* vme: allow disabling of events and modules.
  This is very useful for testing. Without disabling modules multi-event
  processing will report errors and if the module is not even present in the
  vme crate the readout will slow down due to timeouts on the VME bus.

* session saving (HDF5):
  Fix error reporting: fmemopen() is not available on windows! Also errors are
  sometimes swallowed (I'm guessing inside the library during error handling).
  This means the user can get empty error messages.

* Fix anaylsis object selection color under win7. It's horrible and the text is
  not readable anymore.

* Improve VMEScriptEditor search:
  Make it get focus under windows.
  Make it get focus when hitting ctrl+f again
  Bind "find next" to F3.
  Maybe add "highlight" all.

* Analysis: fix names generated by "generate default filters"

--------------------------------------------------
sis3153 implementation TODO
--------------------------------------------------
* Extract and make use of the counter in beginHeaders (0xbb...)
  Count the number of lost packets
* Debug the (m)bltfifocount reads
--------------------------------------------------
end sis3153 implementation TODO
--------------------------------------------------

* Analysis: getDisplayName() and getShortName() are not that great. For the
  AggregateOps operator I'd like to display "Aggregate Operations" in the "add
  operator" context menu instead of "sum". Where else is getDisplayName() used?
  -> The above works. What I need now is to change the suggested operator name
  of selecting a different aggregate op. Right now it always appends ".sum".

* Add more ways to specify how the listfile filenames should look like.
  run number, prefix, etc
* Add a scaler display somewhere. What does this show? Hz?

* Do not use signals/slots for the pause/resume/stop implementation in
  VMEReadoutWorkers. Instead just set the desired state directly (maybe
  securing the access with QAtomicInt in a tight loop). This would allow not
  having to call processEvents() in the readoutLoop anymore.

* Include  git branch name in binary
* Maybe take a look at stopping the analysis mid-buffer on user request. This
  would allow to use larger buffer sizes without increasing the time-to-stop.
  XXX: I do not even know why it takes time to stop. Does StopImmediately not
  work?
  -> Make MVMEEventProcessor support pause/resume directly.

* info button does not work in 2D combined view of 1D histograms
* Resolution change for 2D combined histograms?

* Make a RCbus example including a delay between switchting NIM to cbus mode!

* Implement adding of module specific vme init scripts via the GUI.
  The user should be able to modify the order of init scripts by
  dragging/dropping, remove existing scripts and add new ones.
  Optionally copying of an init script to the same or a different module could
  be implemented.

* Maybe reload the analysis on opening a listfile.
  Without the reload the analysis window can become empty if the listfile
  contains different module uuids than the ones in the analysis. A reload could
  trigger a simple 1->1 import of the module and all would be good again.
  The reload could als trigger opening the import dialog if it requires user
  intervention.
* Take a look at MVMEContext::runScript() and try to fix it. The stuff that's
  done in stopDAQ() seems to work very well...
* Make MVMEContext::runScript() work like the AnalysisPauser: use a
  QProgressDialog, a local event loop and signals slots to make pausing
  reliable and non-hacky.

* Logspam still makes the app hang! Fix this!!!

* HDF5 and Root file writing support!
  Also implement read support for HDF5
* Histo1D and Histo1DWidget
    * Histo1D Calibration UI: "Restore" uses unexpected values. Also there's no way to undo the restore operation. (calibResetToFilter)
      -> "fixed" by just hiding the "restore" button
    * Bug: H1D does not work when unitMin > unitMax
    * Histo1DWidget: zoom out after setHistogram()
      But not when the usage is the one in x- and y-projections where the histo is
      replaced with a similar one.
    * Histo1DWidget: The curve for the last bin is not drawn. Try to finally find a fix for this.
    * Read up on binning error calculations. See how ROOT does it.
    * show fwhm only when gauss display is active
    * Implement Histogram rebinning

* Analysis and AnalysisUI
    * Open new histograms immediately. Do this when creating a sub-histogram.
      Maybe only if DAQ/Replay is running?
    * Copy/Paste
      - Copy needs a clone() operation for analysis elements.
      - On copying an extractor the edit dialog should be opened.
      - Having the ability to clone operators would allow making editing of
        operators much safer.
        Right now if the user picks another input or clears any input slots the
        analysis has to be paused and restarted and dependent operators
        immediately notice the change. This means even if the user cancels the
        dialog the analysis can have unexpected modifications.
        With cloning a copy of the operator would be created. Selecting and
        clearing inputs would only affect the cloned version of the operator
        (input pipes would not need to be fully connected so the input sources
        do not need to change at all during editing -> half connected state!)

- Add error reporting to VMEConfig and Analysis version conversion and read routines

- Refactor gui_write_json_file() to write_json_file() and use exceptions to report errors.
  Meaning: implement functionality using exceptions and not caring about if
  it's used from the gui or not. Then build and use gui wrappers which show
  messageboxes where needed.

- Add warnings to template loading if there are duplicate module types
- Fix diagnosis window hanging and eating system memory when EOE check is
  active and a lot of errors are occuring

* Log throttling!!!!

* Check for off-by-one errors in the 2D projection code

* lastlog.log:
  Write every logged message to lastlog.log. Do this in the main thread. Flush
  to disk frequently.
  At startup move lastlog.log to lastlog.1.log.
  Keep 5 logfiles around. 4 -> 5, 3 -> 4, 2 -> 3, 1 -> 2, 0 -> 1



* select input UI: disable other tree highlights while it's active.
* Fix replay stats display and replay timer. It wasn't designed with pausing
  and stepping in mind.
* ZIP file support:
  On close:
  - write some user description text file to the zip. "Run description", "Run notes", "DAQ notes"
 - save/saveas/load error reporting

==========================
==== Do these later! =====
==========================
* VMEConfig
    * Allow Adding of VME-Init scripts to modules via the gui!

* EventWidget and AnalysisWidget repopulate:
  - Restore open PipeDisplays:
    Store (ObjectId, OutputIndex) to get the output pipe and (pos, size) to restore the widget.
  - Restore splitter states when recreating event widgets.
  - Restore node expansion state
    Could store QUuids for expanded object nodes and after repop rebuild the
    VoidStar set of expanded nodes by getting the pointers via the ids.
* Analysis structure:
  SourceEntry does not really need the eventId as the moduleId implicitly
  specifies the eventId.
* H1D: Take the median of the visible left and right edges. Subtract that value
  from the calculated statistics values. This is supposed to remove the noise
  to the left and right of a peak.
* HistoViewer: Ability to save filled Histograms to disk and reload them later.
  This will allow using histogram tools (fits, etc.) on loaded histos. It also
  allows comparing histos from different runs etc.
* Calculated listfile size in stats display and size shown by windows explorer
  are not the same at all. Why?
* // FIXME: when using subranges the getBinUnchecked() calculation often yields negative bins. why?
  Verify this does in fact happen.
* DAQStats:
  - add pause/resume
  - figure out why buffers/s never has a fractional part
    -> part of the system. addBuffersRead() and addBytesRead() each call maybeUpdateIntervalCounters().
       If we're reading less than 1 buffer per second the resulting bytesPerSecond will be 0 for that interval.
    How to make this better?
- License info needs Apache License for PCG. Maybe others. Check what is needed here!
  Also use info from resources/README
- VMUSB: if there are connect/reconnect errors write them to the log view
  Do this when porting to libusb-1.0 as that should also provide better error messages.
- VMUSB: make the mutex non-recursive!

>>>>> Begin Analysis NG <<<<<
 - Add Operator::getDescription()
 - make sure the UI works with empty vme and event configs
 - display required memory in Histo2D dialog.
 - combine "single word" and "dual word" filters. the distinction is not needed
   anymore as both are MultiWordDataFilters now
 - Load default filters from templates
<<<<< End AnalysisNG >>>>>

* GUI
  * add versioning to the GUI state saved via QSettings. If the version changes
    use the default layout instead of restoring a possibly incompatible state.
  * add a "reset gui state" button somewhere

* add ability to add notes to VME/analysis config (maybe other objects too)
* VMEScript: add print command
* Limit the number of messages/s appended to the logview. With multithreading:
  do messages fill up one of the threads event queues? Can this be limited
  somehow? Better to directly limit the generation of these messages?
* Fix diagnostics window blocking when there are a lot of error messages being generated.

* Histos:
  * add histogram cuts
  * add histogram fitting

* Mesytec Module Firmware Revision & Hardware ID
* prefix and (maybe) run number for listfiles

* Mesytec Werbung ^^ Hintergrundbilder, Wasserzeichen, etc. (CSS Theme?)
* Hist2d: look for standard color scales as used in publications, ROOT, etc.
  https://root.cern.ch/doc/master/TColor_8cxx_source.html#l02400
* How to handle filters without matching module? Right now they're not
  displayed until a module with the corresponding (eventIndex,moduleIndex) is
  created.
  Related: Remove Hist2d on filter removal?
  => would all be fixed when moving from (eventIndex, moduleIndex) to using object ids.

* threading and vme commands
  * run vme scripts in a separate thread when invoked from the gui

* ReadoutWorker split into generic and controller specific parts:
    Generic part is responsible for:
        - running vme init scripts
        - creating and opening the output listfile

    Controller specific parts:
        - init
        - readout
        - shutdown
        - pause
        - resume
  Do this when implementing support for another controller, not before.

* save and restore the zoom and pan of histograms
* save and restore open histograms

=============================
==== Faults and Asserts =====
=============================
zoomRectIndex() 0
ASSERT: "getEventProcessorState() == EventProcessorState::Idle" in file /home/florian/src/mvme2/src/mvme_context.cc, line 825

Thread 1 "mvme" received signal SIGABRT, Aborted.
0x00007ffff4d25067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56
56      ../nptl/sysdeps/unix/sysv/linux/raise.c: No such file or directory.
(gdb) bt
#0  0x00007ffff4d25067 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56
#1  0x00007ffff4d26448 in __GI_abort () at abort.c:89
#2  0x00007ffff60def4e in QMessageLogger::fatal(char const*, ...) const () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#3  0x00007ffff60da7ce in qt_assert(char const*, char const*, int) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#4  0x00007ffff7a7ff1a in MVMEContext::startReplay (this=0x67faf0, nEvents=nEvents@entry=0) at /home/florian/src/mvme2/src/mvme_context.cc:825
#5  0x00007ffff7a4f512 in DAQControlWidget::<lambda()>::operator() (__closure=0x7796e0) at /home/florian/src/mvme2/src/daqcontrol_widget.cc:72
#6  QtPrivate::FunctorCall<QtPrivate::IndexesList<>, QtPrivate::List<>, void, DAQControlWidget::DAQControlWidget(MVMEContext*, QWidget*)::<lambda()> >::call (
    arg=<optimized out>, f=...) at /home/florian/Qt/5.7/gcc_64/include/QtCore/qobjectdefs_impl.h:501
#7  QtPrivate::Functor<DAQControlWidget::DAQControlWidget(MVMEContext*, QWidget*)::<lambda()>, 0>::call<QtPrivate::List<>, void> (arg=<optimized out>, f=...)
    at /home/florian/Qt/5.7/gcc_64/include/QtCore/qobjectdefs_impl.h:558
#8  QtPrivate::QFunctorSlotObject<DAQControlWidget::DAQControlWidget(MVMEContext*, QWidget*)::<lambda()>, 0, QtPrivate::List<>, void>::impl(int, QtPrivate::QSlotObjectBase *, QObject *, void **, bool *) (which=<optimized out>, this_=0x7796d0, r=<optimized out>, a=<optimized out>, ret=<optimized out>)
    at /home/florian/Qt/5.7/gcc_64/include/QtCore/qobject_impl.h:198
#9  0x00007ffff62e577d in QMetaObject::activate(QObject*, int, int, void**) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#10 0x00007ffff7146682 in QAbstractButton::clicked(bool) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#11 0x00007ffff7146875 in ?? () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#12 0x00007ffff7147e44 in ?? () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#13 0x00007ffff7147fe4 in QAbstractButton::mouseReleaseEvent(QMouseEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#14 0x00007ffff70a8b78 in QWidget::event(QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#15 0x00007ffff706352c in QApplicationPrivate::notify_helper(QObject*, QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#16 0x00007ffff706a808 in QApplication::notify(QObject*, QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#17 0x00007ffff62bdae0 in QCoreApplication::notifyInternal2(QObject*, QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#18 0x00007ffff70697bf in QApplicationPrivate::sendMouseEvent(QWidget*, QMouseEvent*, QWidget*, QWidget*, QWidget**, QPointer<QWidget>&, bool) ()
   from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#19 0x00007ffff70c4056 in ?? () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#20 0x00007ffff70c6513 in ?? () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#21 0x00007ffff706352c in QApplicationPrivate::notify_helper(QObject*, QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#22 0x00007ffff706a220 in QApplication::notify(QObject*, QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#23 0x00007ffff62bdae0 in QCoreApplication::notifyInternal2(QObject*, QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#24 0x00007ffff68608db in QGuiApplicationPrivate::processMouseEvent(QWindowSystemInterfacePrivate::MouseEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Gui.so.5
#25 0x00007ffff6862745 in QGuiApplicationPrivate::processWindowSystemEvent(QWindowSystemInterfacePrivate::WindowSystemEvent*) ()
   from /home/florian/Qt/5.7/gcc_64/lib/libQt5Gui.so.5
#26 0x00007ffff6843e73 in QWindowSystemInterface::sendWindowSystemEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Gui.so.5
#27 0x00007fffee697080 in ?? () from /home/florian/Qt/5.7/gcc_64/lib/libQt5XcbQpa.so.5
#28 0x00007ffff1b3c41d in g_main_context_dispatch () from /lib/x86_64-linux-gnu/libglib-2.0.so.0
#29 0x00007ffff1b3c700 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0
#30 0x00007ffff1b3c7ac in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0
#31 0x00007ffff630b047 in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#32 0x00007ffff62bbdca in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#33 0x00007ffff62c3bad in QCoreApplication::exec() () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#34 0x00000000004033bc in main (argc=1, argv=0x7fffffffd518) at /home/florian/src/mvme2/src/main.cpp:93


Thread 1 "mvme" received signal SIGSEGV, Segmentation fault.
0x00007ffff62c6087 in QMetaObject::cast(QObject const*) const () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
(gdb) bt
#0  0x00007ffff62c6087 in QMetaObject::cast(QObject const*) const () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#1  0x00007ffff7a84428 in qobject_cast<ModuleConfig*> (object=<optimized out>) at /home/florian/Qt/5.7/gcc_64/include/QtCore/qobject.h:516
#2  MVMEContext::logModuleCounters (this=this@entry=0x67fae0) at /home/florian/src/mvme2/src/mvme_context.cc:506
#3  0x00007ffff7a846d1 in MVMEContext::onDAQStateChanged (this=0x67fae0, state=state@entry=DAQState::Idle) at /home/florian/src/mvme2/src/mvme_context.cc:534
#4  0x00007ffff7a849ba in MVMEContextPrivate::stopDAQReplay (this=0x673c00) at /home/florian/src/mvme2/src/mvme_context.cc:152
#5  0x00007ffff7a84db9 in MVMEContextPrivate::stopDAQ (this=<optimized out>) at /home/florian/src/mvme2/src/mvme_context.cc:105
#6  0x00007ffff7a84de5 in MVMEContext::stopDAQ (this=this@entry=0x67fae0) at /home/florian/src/mvme2/src/mvme_context.cc:797
#7  0x00007ffff7a850f8 in MVMEContext::closeReplayFile (this=0x67fae0) at /home/florian/src/mvme2/src/mvme_context.cc:633
#8  0x00007ffff7a8c1ef in mvme::on_actionCloseListfile_triggered (this=<optimized out>) at /home/florian/src/mvme2/src/mvme.cpp:803
#9  0x00007ffff7b0262a in mvme::qt_static_metacall (_o=0x8c7280, _o@entry=0x7fffffffd2e0, _c=9204352, _c@entry=QMetaObject::InvokeMetaMethod, _id=-536858816, _id@entry=11, _a=0xc, _a@entry=0x7fffffffc500) at /home/florian/src/build-mvme2-Desktop_Qt_5_7_0_GCC_64bit-Debug/src/moc_mvme.cpp:192
#10 0x00007ffff7b059df in mvme::qt_metacall (this=0x7fffffffd2e0, _c=QMetaObject::InvokeMetaMethod, _id=11, _a=0x7fffffffc500) at /home/florian/src/build-mvme2-Desktop_Qt_5_7_0_GCC_64bit-Debug/src/moc_mvme.cpp:240
#11 0x00007ffff62e5700 in QMetaObject::activate(QObject*, int, int, void**) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#12 0x00007ffff705c7b2 in QAction::triggered(bool) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#13 0x00007ffff705f18d in QAction::activate(QAction::ActionEvent) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#14 0x00007ffff71c4faa in ?? () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#15 0x00007ffff71c9964 in ?? () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#16 0x00007ffff71cd7c6 in QMenu::mouseReleaseEvent(QMouseEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#17 0x00007ffff70a8b78 in QWidget::event(QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#18 0x00007ffff71ce1cb in QMenu::event(QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#19 0x00007ffff706352c in QApplicationPrivate::notify_helper(QObject*, QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#20 0x00007ffff706a808 in QApplication::notify(QObject*, QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#21 0x00007ffff62bdae0 in QCoreApplication::notifyInternal2(QObject*, QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#22 0x00007ffff70697bf in QApplicationPrivate::sendMouseEvent(QWidget*, QMouseEvent*, QWidget*, QWidget*, QWidget**, QPointer<QWidget>&, bool) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#23 0x00007ffff70c45fb in ?? () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#24 0x00007ffff70c6513 in ?? () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#25 0x00007ffff706352c in QApplicationPrivate::notify_helper(QObject*, QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#26 0x00007ffff706a220 in QApplication::notify(QObject*, QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Widgets.so.5
#27 0x00007ffff62bdae0 in QCoreApplication::notifyInternal2(QObject*, QEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#28 0x00007ffff68608db in QGuiApplicationPrivate::processMouseEvent(QWindowSystemInterfacePrivate::MouseEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Gui.so.5
#29 0x00007ffff6862745 in QGuiApplicationPrivate::processWindowSystemEvent(QWindowSystemInterfacePrivate::WindowSystemEvent*) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Gui.so.5
#30 0x00007ffff6843e73 in QWindowSystemInterface::sendWindowSystemEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Gui.so.5
#31 0x00007fffee697080 in ?? () from /home/florian/Qt/5.7/gcc_64/lib/libQt5XcbQpa.so.5
#32 0x00007ffff1b3c41d in g_main_context_dispatch () from /lib/x86_64-linux-gnu/libglib-2.0.so.0
#33 0x00007ffff1b3c700 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0
#34 0x00007ffff1b3c7ac in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0
#35 0x00007ffff630b047 in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#36 0x00007ffff62bbdca in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#37 0x00007ffff62c3bad in QCoreApplication::exec() () from /home/florian/Qt/5.7/gcc_64/lib/libQt5Core.so.5
#38 0x00000000004033bc in main (argc=1, argv=0x7fffffffd518) at /home/florian/src/mvme2/src/main.cpp:93
