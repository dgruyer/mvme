##################################################
Introduction
##################################################
**mvme** is a VME Data Acquisition solution by **mesytec** aimed at small scale nuclear physics
experiments involving a single VME controller. The goal of this project is to provide an easy to
setup, easy to use, cross-platform data acquisition system with basic data visualization and
analysis capabilities.

.. figure:: images/mvme_architecure.png

   mvme overview

===================
Features
===================

* High-rate, low-latency VME module readout
* Readout rates of up to 15 MB/s
* Easy creation and configuration of the VME setup

  * Multiple event triggers are possible (NIM, IRQ, periodic readout)
  * Multiple modules can be read out per trigger
  * Flexible VME module setup using configuration scripts

* Live histogramming of readout data (1D and 2D)
* Flexible VME module data extraction
* Graphical analysis UI
* Optional compression of output listfiles
* Replays of recorded listfile data

========
Overview
========

The VME side
------------
mvme achieves high data rate, low latency VME readout by using VM-USBs
**autonomous DAQ mode**. In this mode the controller executes lists of commands
(**trigger stacks**) upon activation of a specific trigger condition. Data
generated by the execution of trigger stacks is buffered and then sent over USB
to the controlling computer.

In mvme the physical VME setup is described as a tree of objects with **events**
as top-level nodes. Each event has a trigger condition (e.g. *IRQ=1* or
*NIM*) and contains the **modules** to be read out on every activation of the
trigger.

A **module** in mvme has a collection of :ref:`VME Scripts
<vme-script-reference>`. These scripts contain the module configuration (module
specific parameters, multicast setup, etc.) and the commands required to
perform the readout. The readout commands of all modules belonging to the same
event are combined to form the trigger stacks uploaded to the VME controller.

.. figure:: images/vme_two_modules_expanded.png

   VME setup with one event containing two modules

The VME setup also describes the structure of the data that is expected to be
read out and thus allows the software to validate the received data stream.

The DAQ process
---------------
When requested to start a data acquisition run mvme performs the following
steps:

* Setup modules using the module VME scripts
* Initialize the VME controller using information from the VME configuration
* Switch the controller into DAQ mode
* Repeat until DAQ is stopped:

  * Read a data buffer from the VME controller
  * Validate the structure of the received data
  * Transform data into mvme listfile format
  * Write data to the listfile (with optional compression)
  * Pass data to the analysis
* Tell the controller to leave DAQ mode
* Close the listfile


Analysis
--------


.. note:: FIXME The analysis does not slow down data acquisition!



==================================================
System Requirements
==================================================

* Any recent 64-bit Linux distribution or a 64-bit version of Windows XP or later.

  32-bit builds are possible but not recommended as the limited address space can be quickly used up
  when creating multiple histograms.
* **WIENER VM-USB** VME Controller
* libusb-0.1 (Linux) / libusb-win32 (Windows)

  The windows installer can optionally run a program to handle the driver installation (Zadig).

.. note::
  It is also possible to compile builds using libusb-1.0 instead of the old libusb-0.1 API.

.. TODO Refer to the build instructions for 32-bit builds here once those build instructions are written.

* At least 4 GB RAM is recommended.
* A multicore processor is recommended as mvme itself makes use of three
  logical cores: readout, analysis and GUI (which includes histogram rendering).



.. include:: installation.rstinc
.. include:: quickstart.rstinc
