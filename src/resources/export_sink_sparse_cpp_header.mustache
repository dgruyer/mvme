/* This file was auto generated by mvme-{{mvme_version}} on {{export_date}},
 * with data from run {{run_id}}.
 * DO NOT MODFIY!
 * This file will be overwritten on the next export.
 */
#ifndef __MVME_EXPORT_GUARD_{{header_guard}}__
#define __MVME_EXPORT_GUARD_{{header_guard}}__

#include <algorithm>
#include <cassert>
#include <cstddef>
#include <istream>
#include <limits>
#include <string>
#include <utility>
#include <vector>

struct {{struct_name}}
{
    struct SparseArray
    {
        std::vector<uint16_t> indexes;
        std::vector<double> values;

        size_t size() const
        {
            assert(values.size() == indexes.size());
            return values.size();
        }

        double operator[](uint16_t paramIndex) const
        {
            auto it = std::find(indexes.begin(), indexes.end(), paramIndex);

            if (it != indexes.end())
            {
                size_t ii = it - indexes.begin();
                assert(ii < value.size());
                return values.at(ii);
            }

            return std::numeric_limits<double>::quiet_NaN();
        }
    };

    /* Exported data arrays. */
{{#array_info}}
    SparseArray {{variable_name}};
{{/array_info}}

    /* Lower and upper limits for each parameter of each array. */
    struct Limits
    {
{{#array_info}}
        static const double {{variable_name}}[{{dimension}}][2];
{{/array_info}}
    };

    /* The number of data arrays. */
    static const size_t ArrayCount = {{array_count}};

    /* The dimension of each exported array. */
    static const uint16_t ArrayDimensions[ArrayCount];

    /* The name of each exported array. */
    static const std::string ArrayNames[ArrayCount];

    /* The unit label for each array. */
    static const std::string UnitLabels[ArrayCount];

    /* Accessors using array and param indices. These allow non-static access
       to static data. */

    /* Same as the static ArrayCount member. */
    size_t getArrayCount() const;

    /* Returns a pointer to the exported array with the given index.
       Returns nullptr if the index is out of range. */
    const SparseArray *getArray(size_t index) const;
    SparseArray *getArray(size_t index);

    /* Equivalent to getArray(arrayIndex)[paramIndex]. Returns a quiet NaN if
     * any of the indexes is out of range or the specified value is not present
     * in the data. */
    double getValue(size_t arrayIndex, size_t paramIndex);

    /* Returns the size of the exported array with the given index.
       Returns 0 if the index is out of range. */
    size_t getArrayDimension(size_t index) const;

    /* Returns the name of the input array as defined in the analysis. */
    std::string getArrayName(size_t index) const;

    /* Returns the unit label of the array with the given index.
       Returns an empty string if the index is out of range. */
    std::string getUnitLabel(size_t index) const;

    /* Returns the limits for the given array and parameter indices.
       A std::pair of NaN values is returned if either the array index or the
       parameter index are out of range. */
    std::pair<double, double> getLimits(size_t arrayIndex, size_t paramIndex) const;
};

std::istream &read(std::istream &in, {{struct_name}} &event);

#endif /* __MVME_EXPORT_GUARD_{{header_guard}}__ */
{{!
vim:ft=cpp
}}
