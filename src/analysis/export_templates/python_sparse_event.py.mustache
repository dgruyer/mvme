# This file was auto generated by mvme-{{mvme_version}} on {{export_date}}.

import struct

class {{struct_name}}:
    def __init__(self):
{{#array_info}}
        self.{{variable_name}} = [float('nan') for i in range(self.ArrayDimensions[{{index}}])]
{{/array_info}}

    ArrayCount = {{array_count}}

    Limits = [
{{#array_info}}
        [
{{#limits}}
            ( {{lower_limit}}, {{upper_limit}} ),
{{/limits}}
        ],
{{/array_info}}
    ]


    ArrayDimensions = [
{{#array_info}}
        {{dimension}},
{{/array_info}}
    ]

    ArrayNames = [
{{#array_info}}
        "{{analysis_name}}",
{{/array_info}}
    ]

    UnitLabels = [
{{#array_info}}
        "{{unit}}",
{{/array_info}}
    ]

    def getArray(self, arrayIndex):
{{#array_info}}
        if arrayIndex == {{index}}:
            return self.{{variable_name}}
{{/array_info}}
        return None

    @staticmethod
    def read(inputObject):

        def read_into_array(dest):
            # Read the uint16_t entry count
            fmt        = "=H";
            size       = struct.calcsize(fmt)
            entryCount = struct.unpack(fmt, inputObject.read(size))[0]

            assert entryCount <= len(dest)

            if entryCount > 0:
                # Read the list of uint16_t indexes
                fmt     = "=%uH" % (entryCount);
                size    = struct.calcsize(fmt)
                indexes = struct.unpack(fmt, inputObject.read(size))

                # Read the list of double values
                fmt     = "=%ud" % (entryCount);
                size    = struct.calcsize(fmt)
                values  = struct.unpack(fmt, inputObject.read(size))

                # Copy values into the correct positions
                for index, value in zip(indexes, values):
                    assert index < len(dest)
                    dest[index] = value

        try:
            result = {{struct_name}}()
{{#array_info}}
            read_into_array(result.{{variable_name}})
{{/array_info}}
            return result

        except struct.error:
            return None

{{!
vim:ft=python
}}
