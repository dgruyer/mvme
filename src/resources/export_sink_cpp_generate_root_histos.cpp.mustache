#include <cmath>
#include <fstream>
#include <iostream>
#include "{{export_header_file}}"
#ifdef MVME_EXPORT_USE_ZSTR
#include "zstr.hpp"
#endif

using std::cout;
using std::endl;

int main(int argc, char *argv[])
{
    std::string inputFilename;

    if (argc < 2)
    {
        inputFilename = "{{export_data_basename}}";
        cout << "Using generated input filename " << inputFilename << endl;
    }
    else
    {
        inputFilename = argv[1];
        cout << "Using filename from command line: " << inputFilename << endl;
    }

#ifdef MVME_EXPORT_USE_ZSTR
    zstr::ifstream input(inputFilename);
#else
    std::ifstream input;
    input.open(inputFilename, std::ios::in | std::ios::binary);
#endif

    size_t eventsRead = 0;
    {{struct_name}} event;

#if 0
        size_t eventNumber = eventsRead++;

        cout << "Event #" << eventNumber << endl;

        for (size_t arrayIndex = 0;
             arrayIndex < event.getArrayCount();
             arrayIndex++)
        {
            std::string arrayName   = event.getArrayName(arrayIndex);
            const auto sparseArray  = event.getArray(arrayIndex);

            assert(sparseArray);

            cout << "  Array #" << arrayIndex << ": ";

            for (size_t ii = 0; ii < sparseArray->size(); ii++)
            {
                uint16_t index = sparseArray->indexes[ii];
                double   value = sparseArray->values[ii];
                cout << "[" << index << "] = " << value << ", ";
            }

            cout << endl;
        }
        cout << endl;
#else
        for (size_t arrayIndex = 0;
             arrayIndex < event.getArrayCount();
             arrayIndex++)
        {
            size_t dim = event.getArrayDimension(arrayIndex);

            for (size_t paramIndex = 0; paramIndex < dim; paramIndex++)
            {

            }

        }
#endif

    cout << endl
        << "Read " << eventsRead << " events from "
        << inputFilename << "." << endl;
}
{{!
vim:ft=cpp
}}

