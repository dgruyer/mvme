==========================
==== Do these first! =====
==========================
* workspace concept
    copy templates from app dir to workspace

* Limit the number of messages/s appended to the logview. With multithreading:
  do messages fill up one of the threads event queues? Can this be limited
  somehow? Better to directly limit the generation of these messages?
* Fix diagnostics window blocking when there are a lot of error messages being generated.

* prefix and (maybe) run number for listfiles
* display generated listfile name when daq runs
* display written listfile size in daqcontrol widget


==========================
==== Do these later! =====
==========================
* DualWordDataFilters: handle negative difference values when filling the histograms
* Mesytec Werbung ^^ Hintergrundbilder, Wasserzeichen, etc. (CSS Theme?)
* Hist2d: look for standard color scales as used in publications, ROOT, etc.
  https://root.cern.ch/doc/master/TColor_8cxx_source.html#l02400
* Avoiding spinning in processEvents() while waiting for buffers. Instead use
  something like a semaphore and figure out how to still react to "stop"
  commands.
  Could signal the same semaphore when receiving commands and set some
  variables that are checked once the thread wakes up.
  (Maybe try WaitForMoreEvents as a quick fix)
* Hist2d Icon
* How to handle filters without matching module? Right now they're not
  displayed until a module with the corresponding (eventIndex,moduleIndex) is
  created.
  Related: Remove Hist2d on filter removal?

* add versioning to the GUI state saved via QSettings. If the version changes
  use the default layout instead of restoring a possibly incompatible state.
* add ability to create 2d histograms during DAQ/replay and fill them immediately

* Histos
  * add histogram cuts
  * add histogram fitting

* threading and vme commands
  * run vme scripts in a separate thread when invoked from the gui
  * FIX the pause, run script, resume implementation. it's very hacky!
    - run script: Maybe implement a command queue in the context and return
                  QFuture<VMEResultList> objects to clients.
    - pause and resume: also return a QFuture or something to be able to wait for
                        the state change
    -> look at QFutureInterface

* ReadoutWorker split into generic and controller specific parts:
    Generic part is responsible for:
        - running vme init scripts
        - creating and opening the output listfile

    Controller specific parts:
        - init
        - readout
        - shutdown
        - pause
        - resume
  Do this when implementing support for another controller

* save and restore the position and size of windows
* save and restore the zoom and pan of histograms
* save and restore open histograms
* histograms: look at the storage type used. currently it's u32. should this be double?
* make use of the "enabled" flag for vme scripts, modules, events, etc

==========================
===== Maybe do these =====
==========================
* Move from MDI to multiple top-level windows (allows making use of multiple monitors)

======================================
==== Done, but kept for reference ====
======================================
